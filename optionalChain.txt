Опциональная цепочка '?.'

Опциональная цепочка ?. — это безопасный способ доступа к свойствам вложенных объектов, даже если какое-либо из промежуточных свойств не существует.

Предположим, что у нас есть объекты user, которые содержат информацию о наших пользователях.

У большинства наших пользователей есть адреса в свойстве user.address с улицей user.address.street, но некоторые из них их не указали.

В таком случае, когда мы попытаемся получить user.address.street, а пользователь окажется без адреса, мы получим ошибку.


Опциональная цепочка ?. останавливает вычисление и возвращает undefined, если значение перед ?. равно undefined или null.

Другими словами, value?.prop:

работает как value.prop, если значение value существует,
в противном случае (когда value равно undefined/null) он возвращает undefined.

let user = {};

console.log(user?.address?.street); // undefined without error

let html = document.querySelector('.element')?.innerHtml; // will undefined if there is no element


let userTwo = null;

console.log(userTwo?.address);
console.log(userTwo?.address.street)

Обратите внимание: синтаксис ?. делает необязательным значение перед ним, но не какое-либо последующее.

Так например, в записи user?.address.street.name ?. позволяет user безопасно быть null/undefined (и в этом случае возвращает undefined), но это так только для user. Доступ к последующим свойствам осуществляется обычным способом. Если мы хотим, чтобы некоторые из них были необязательными, тогда нам нужно будет заменить больше . на ?.

Использовать ?. только там, где нормально, что чего-то не существует.

Если переменной user вообще нет, то user?.anything приведёт к ошибкею

?. немедленно останавливает вычисление, если левая часть не существует.
Так что если после ?. есть какие-то вызовы функций или операции, то они не произойдут.

let userThree = null;

let x = 0;

userThree?.sayHi(x++); // there is no "user" so execution doesn't reach the sayHi and x++ call
console.log(x); // 0

 ?. — специальная синтаксическая конструкция, которая также работает с функциями и квадратными скобками.

Например, ?.() используется для вызова функции, которая может не существовать.

let userAdmin = {
	admin() {
		console.log('I am admin');
	}
}

let userGuest = {};

userAdmin.admin?.(); // I am admin
userGuest.admin?.(); // nothing


?.[] также работает, если мы хотим использовать скобки [] для доступа к свойствам вместо точки .
Позволяет безопасно считывать свойство из объекта, который может не существовать.

let key = 'firstName';

let userFour = {
	firstName: 'Jhon',
}

let userFive = null;

console.log(userFour?.[key]); // Jhon
console.log(userFive?.[key]); // undefined

Также мы можем использовать ?. с delete:
delete user?.name;

Использовать ?. для безопасного чтения и удаления, но не для записи
Опциональная цепочка ?. не имеет смысла в левой части присваивания.


let user = null;

user?.name = "John"; // error

Синтаксис опциональной цепочки ?. имеет три формы:

obj?.prop – возвращает obj.prop если obj существует, в противном случае undefined.
obj?.[prop] – возвращает obj[prop] если obj существует, в противном случае undefined.
obj.method?.() – вызывает obj.method(), если obj.method существует, в противном случае возвращает undefined.

