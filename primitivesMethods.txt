Примитив

Это – значение «примитивного» типа.
Есть 7 примитивных типов: string, number, boolean, symbol, null, undefined и bigint.
Объект

Может хранить множество значений как свойства.
Объявляется при помощи фигурных скобок {}, например: {name: "Рома", age: 30}. В JavaScript есть и другие виды объектов: например, функции тоже являются объектами.
Одна из лучших особенностей объектов – это то, что мы можем хранить функцию как одно из свойств объекта.

let obj = {
	name: 'Jhon',
	sayHi: function() {
		alert('Hello')
	},
}

obj.sayHi();

Здесь мы создали объект с методом sayHi.

Есть обратная сторона!

Объекты «тяжелее» примитивов. Они нуждаются в дополнительных ресурсах для поддержания внутренней структуры.

Примитивы остаются примитивами. Одно значение, как и хотелось.
Язык позволяет осуществлять доступ к методам и свойствам строк, чисел, булевых значений и символов.
Чтобы это работало, при таком доступе создаётся специальный «объект-обёртка», который предоставляет нужную функциональность, а после удаляется.

Каждый примитив имеет свой собственный «объект-обёртку», которые называются: String, Number, Boolean, Symbol и BigInt. Таким образом, они имеют разный набор методов.

К примеру, существует метод str.toUpperCase(), который возвращает строку в верхнем регистре.

Вот, как он работает:

let str = "Привет";

alert( str.toUpperCase() ); // ПРИВЕТ

Строка str – примитив. В момент обращения к его свойству, создаётся специальный объект, который знает значение строки и имеет такие полезные методы, как toUpperCase().
Этот метод запускается и возвращает новую строку (показывается в alert).
Специальный объект удаляется, оставляя только примитив str.
Получается, что примитивы могут предоставлять методы, и в то же время оставаться «лёгкими».

Число имеет собственный набор методов. Пример:

let num = 1.23456;

console.log(num.toFixed(2)); //1.23;

let num = Number("123"); // превращает строку в число

null/undefined не имеют методов
Особенные примитивы null и undefined являются исключениями. У них нет соответствующих «объектов-обёрток», и они не имеют никаких методов. В некотором смысле, они «самые примитивные».

Попытка доступа к свойствам такого значения возвратит ошибку:

alert(null.test); // ошибка

Итог:
Все примитивы, кроме null и undefined, предоставляют множество полезных методов. Мы познакомимся с ними поближе в следующих главах.
Формально эти методы работают с помощью временных объектов, но движки JavaScript внутренне очень хорошо оптимизируют этот процесс, так что их вызов не требует много ресурсов.


